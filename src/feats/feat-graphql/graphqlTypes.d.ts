/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLAddress {
  street?: string;
  suite?: string;
  city?: string;
  zipcode?: string;
  geo?: GQLGeo;
}

export interface GQLAddressInput {
  street?: string;
  suite?: string;
  city?: string;
  zipcode?: string;
  geo?: GQLGeoInput;
}

export interface GQLAlbum {
  id?: string;
  title?: string;
  user?: GQLUser;
  photos?: GQLPhotosPage;
}

export interface GQLAlbumsPage {
  data?: Array<GQLAlbum | null>;
  links?: GQLPaginationLinks;
  meta?: GQLPageMetadata;
}

export const enum GQLCacheControlScope {
  PUBLIC = 'PUBLIC',
  PRIVATE = 'PRIVATE'
}

export interface GQLComment {
  id?: string;
  name?: string;
  email?: string;
  body?: string;
  post?: GQLPost;
}

export interface GQLCommentsPage {
  data?: Array<GQLComment | null>;
  links?: GQLPaginationLinks;
  meta?: GQLPageMetadata;
}

export interface GQLCompany {
  name?: string;
  catchPhrase?: string;
  bs?: string;
}

export interface GQLCompanyInput {
  name?: string;
  catchPhrase?: string;
  bs?: string;
}

export interface GQLCreateAlbumInput {
  title: string;
  userId: string;
}

export interface GQLCreateCommentInput {
  name: string;
  email: string;
  body: string;
}

export interface GQLCreatePhotoInput {
  title: string;
  url: string;
  thumbnailUrl: string;
}

export interface GQLCreatePostInput {
  title: string;
  body: string;
}

export interface GQLCreateTodoInput {
  title: string;
  completed: boolean;
}

export interface GQLCreateUserInput {
  name: string;
  username: string;
  email: string;
  address?: GQLAddressInput;
  phone?: string;
  website?: string;
  company?: GQLCompanyInput;
}

export interface GQLGeo {
  lat?: number;
  lng?: number;
}

export interface GQLGeoInput {
  lat?: number;
  lng?: number;
}

export interface GQLMutation {
  _?: number;
  createAlbum?: GQLAlbum;
  updateAlbum?: GQLAlbum;
  deleteAlbum?: boolean;
  createComment?: GQLComment;
  updateComment?: GQLComment;
  deleteComment?: boolean;
  createPhoto?: GQLPhoto;
  updatePhoto?: GQLPhoto;
  deletePhoto?: boolean;
  createPost?: GQLPost;
  updatePost?: GQLPost;
  deletePost?: boolean;
  createTodo?: GQLTodo;
  updateTodo?: GQLTodo;
  deleteTodo?: boolean;
  createUser?: GQLUser;
  updateUser?: GQLUser;
  deleteUser?: boolean;
}

export const enum GQLOperatorKindEnum {
  GTE = 'GTE',
  LTE = 'LTE',
  NE = 'NE',
  LIKE = 'LIKE'
}

export interface GQLOperatorOptions {
  kind?: GQLOperatorKindEnum;
  field?: string;
  value?: string;
}

export interface GQLPageLimitPair {
  page?: number;
  limit?: number;
}

export interface GQLPageMetadata {
  totalCount?: number;
}

export interface GQLPageQueryOptions {
  paginate?: GQLPaginateOptions;
  slice?: GQLSliceOptions;
  sort?: Array<GQLSortOptions | null>;
  operators?: Array<GQLOperatorOptions | null>;
  search?: GQLSearchOptions;
}

export interface GQLPaginateOptions {
  page?: number;
  limit?: number;
}

export interface GQLPaginationLinks {
  first?: GQLPageLimitPair;
  prev?: GQLPageLimitPair;
  next?: GQLPageLimitPair;
  last?: GQLPageLimitPair;
}

export interface GQLPhoto {
  id?: string;
  title?: string;
  url?: string;
  thumbnailUrl?: string;
  album?: GQLAlbum;
}

export interface GQLPhotosPage {
  data?: Array<GQLPhoto | null>;
  links?: GQLPaginationLinks;
  meta?: GQLPageMetadata;
}

export interface GQLPost {
  id?: string;
  title?: string;
  body?: string;
  user?: GQLUser;
  comments?: GQLCommentsPage;
}

export interface GQLPostsPage {
  data?: Array<GQLPost | null>;
  links?: GQLPaginationLinks;
  meta?: GQLPageMetadata;
}

export interface GQLQuery {
  _?: number;
  albums?: GQLAlbumsPage;
  album?: GQLAlbum;
  comments?: GQLCommentsPage;
  comment?: GQLComment;
  photos?: GQLPhotosPage;
  photo?: GQLPhoto;
  posts?: GQLPostsPage;
  post?: GQLPost;
  todos?: GQLTodosPage;
  todo?: GQLTodo;
  users?: GQLUsersPage;
  user?: GQLUser;
}

export interface GQLSearchOptions {
  q?: string;
}

export interface GQLSliceOptions {
  start?: number;
  end?: number;
  limit?: number;
}

export interface GQLSortOptions {
  field?: string;
  order?: GQLSortOrderEnum;
}

export const enum GQLSortOrderEnum {
  ASC = 'ASC',
  DESC = 'DESC'
}

export interface GQLTodo {
  id?: string;
  title?: string;
  completed?: boolean;
  user?: GQLUser;
}

export interface GQLTodosPage {
  data?: Array<GQLTodo | null>;
  links?: GQLPaginationLinks;
  meta?: GQLPageMetadata;
}

export interface GQLUpdateAlbumInput {
  title?: string;
  userId?: string;
}

export interface GQLUpdateCommentInput {
  name?: string;
  email?: string;
  body?: string;
}

export interface GQLUpdatePhotoInput {
  title?: string;
  url?: string;
  thumbnailUrl?: string;
}

export interface GQLUpdatePostInput {
  title?: string;
  body?: string;
}

export interface GQLUpdateTodoInput {
  title?: string;
  completed?: boolean;
}

export interface GQLUpdateUserInput {
  name?: string;
  username?: string;
  email?: string;
  address?: GQLAddressInput;
  phone?: string;
  website?: string;
  company?: GQLCompanyInput;
}

export type GQLUpload = any;

export interface GQLUser {
  id?: string;
  name?: string;
  username?: string;
  email?: string;
  address?: GQLAddress;
  phone?: string;
  website?: string;
  company?: GQLCompany;
  posts?: GQLPostsPage;
  albums?: GQLAlbumsPage;
  todos?: GQLTodosPage;
}

export interface GQLUsersPage {
  data?: Array<GQLUser | null>;
  links?: GQLPaginationLinks;
  meta?: GQLPageMetadata;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Address?: GQLAddressTypeResolver;
  Album?: GQLAlbumTypeResolver;
  AlbumsPage?: GQLAlbumsPageTypeResolver;
  Comment?: GQLCommentTypeResolver;
  CommentsPage?: GQLCommentsPageTypeResolver;
  Company?: GQLCompanyTypeResolver;
  Geo?: GQLGeoTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  PageLimitPair?: GQLPageLimitPairTypeResolver;
  PageMetadata?: GQLPageMetadataTypeResolver;
  PaginationLinks?: GQLPaginationLinksTypeResolver;
  Photo?: GQLPhotoTypeResolver;
  PhotosPage?: GQLPhotosPageTypeResolver;
  Post?: GQLPostTypeResolver;
  PostsPage?: GQLPostsPageTypeResolver;
  Query?: GQLQueryTypeResolver;
  Todo?: GQLTodoTypeResolver;
  TodosPage?: GQLTodosPageTypeResolver;
  Upload?: GraphQLScalarType;
  User?: GQLUserTypeResolver;
  UsersPage?: GQLUsersPageTypeResolver;
}
export interface GQLAddressTypeResolver<TParent = any> {
  street?: AddressToStreetResolver<TParent>;
  suite?: AddressToSuiteResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  zipcode?: AddressToZipcodeResolver<TParent>;
  geo?: AddressToGeoResolver<TParent>;
}

export interface AddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToSuiteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToZipcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToGeoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAlbumTypeResolver<TParent = any> {
  id?: AlbumToIdResolver<TParent>;
  title?: AlbumToTitleResolver<TParent>;
  user?: AlbumToUserResolver<TParent>;
  photos?: AlbumToPhotosResolver<TParent>;
}

export interface AlbumToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AlbumToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AlbumToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AlbumToPhotosArgs {
  options?: GQLPageQueryOptions;
}
export interface AlbumToPhotosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: AlbumToPhotosArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAlbumsPageTypeResolver<TParent = any> {
  data?: AlbumsPageToDataResolver<TParent>;
  links?: AlbumsPageToLinksResolver<TParent>;
  meta?: AlbumsPageToMetaResolver<TParent>;
}

export interface AlbumsPageToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AlbumsPageToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AlbumsPageToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>;
  name?: CommentToNameResolver<TParent>;
  email?: CommentToEmailResolver<TParent>;
  body?: CommentToBodyResolver<TParent>;
  post?: CommentToPostResolver<TParent>;
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentsPageTypeResolver<TParent = any> {
  data?: CommentsPageToDataResolver<TParent>;
  links?: CommentsPageToLinksResolver<TParent>;
  meta?: CommentsPageToMetaResolver<TParent>;
}

export interface CommentsPageToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentsPageToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentsPageToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCompanyTypeResolver<TParent = any> {
  name?: CompanyToNameResolver<TParent>;
  catchPhrase?: CompanyToCatchPhraseResolver<TParent>;
  bs?: CompanyToBsResolver<TParent>;
}

export interface CompanyToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToCatchPhraseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToBsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGeoTypeResolver<TParent = any> {
  lat?: GeoToLatResolver<TParent>;
  lng?: GeoToLngResolver<TParent>;
}

export interface GeoToLatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeoToLngResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  _?: MutationTo_Resolver<TParent>;
  createAlbum?: MutationToCreateAlbumResolver<TParent>;
  updateAlbum?: MutationToUpdateAlbumResolver<TParent>;
  deleteAlbum?: MutationToDeleteAlbumResolver<TParent>;
  createComment?: MutationToCreateCommentResolver<TParent>;
  updateComment?: MutationToUpdateCommentResolver<TParent>;
  deleteComment?: MutationToDeleteCommentResolver<TParent>;
  createPhoto?: MutationToCreatePhotoResolver<TParent>;
  updatePhoto?: MutationToUpdatePhotoResolver<TParent>;
  deletePhoto?: MutationToDeletePhotoResolver<TParent>;
  createPost?: MutationToCreatePostResolver<TParent>;
  updatePost?: MutationToUpdatePostResolver<TParent>;
  deletePost?: MutationToDeletePostResolver<TParent>;
  createTodo?: MutationToCreateTodoResolver<TParent>;
  updateTodo?: MutationToUpdateTodoResolver<TParent>;
  deleteTodo?: MutationToDeleteTodoResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  deleteUser?: MutationToDeleteUserResolver<TParent>;
}

export interface MutationTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateAlbumArgs {
  input: GQLCreateAlbumInput;
}
export interface MutationToCreateAlbumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateAlbumArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateAlbumArgs {
  id: string;
  input: GQLUpdateAlbumInput;
}
export interface MutationToUpdateAlbumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateAlbumArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteAlbumArgs {
  id: string;
}
export interface MutationToDeleteAlbumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteAlbumArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateCommentArgs {
  input: GQLCreateCommentInput;
}
export interface MutationToCreateCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCommentArgs {
  id: string;
  input: GQLUpdateCommentInput;
}
export interface MutationToUpdateCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteCommentArgs {
  id: string;
}
export interface MutationToDeleteCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreatePhotoArgs {
  input: GQLCreatePhotoInput;
}
export interface MutationToCreatePhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePhotoArgs {
  id: string;
  input: GQLUpdatePhotoInput;
}
export interface MutationToUpdatePhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePhotoArgs {
  id: string;
}
export interface MutationToDeletePhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreatePostArgs {
  input: GQLCreatePostInput;
}
export interface MutationToCreatePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePostArgs {
  id: string;
  input: GQLUpdatePostInput;
}
export interface MutationToUpdatePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePostArgs {
  id: string;
}
export interface MutationToDeletePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTodoArgs {
  input: GQLCreateTodoInput;
}
export interface MutationToCreateTodoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTodoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTodoArgs {
  id: string;
  input: GQLUpdateTodoInput;
}
export interface MutationToUpdateTodoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTodoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTodoArgs {
  id: string;
}
export interface MutationToDeleteTodoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTodoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUserArgs {
  input: GQLCreateUserInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserArgs {
  id: string;
  input: GQLUpdateUserInput;
}
export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteUserArgs {
  id: string;
}
export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageLimitPairTypeResolver<TParent = any> {
  page?: PageLimitPairToPageResolver<TParent>;
  limit?: PageLimitPairToLimitResolver<TParent>;
}

export interface PageLimitPairToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageLimitPairToLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageMetadataTypeResolver<TParent = any> {
  totalCount?: PageMetadataToTotalCountResolver<TParent>;
}

export interface PageMetadataToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaginationLinksTypeResolver<TParent = any> {
  first?: PaginationLinksToFirstResolver<TParent>;
  prev?: PaginationLinksToPrevResolver<TParent>;
  next?: PaginationLinksToNextResolver<TParent>;
  last?: PaginationLinksToLastResolver<TParent>;
}

export interface PaginationLinksToFirstResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationLinksToPrevResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationLinksToNextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationLinksToLastResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPhotoTypeResolver<TParent = any> {
  id?: PhotoToIdResolver<TParent>;
  title?: PhotoToTitleResolver<TParent>;
  url?: PhotoToUrlResolver<TParent>;
  thumbnailUrl?: PhotoToThumbnailUrlResolver<TParent>;
  album?: PhotoToAlbumResolver<TParent>;
}

export interface PhotoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToThumbnailUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToAlbumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPhotosPageTypeResolver<TParent = any> {
  data?: PhotosPageToDataResolver<TParent>;
  links?: PhotosPageToLinksResolver<TParent>;
  meta?: PhotosPageToMetaResolver<TParent>;
}

export interface PhotosPageToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotosPageToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotosPageToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPostTypeResolver<TParent = any> {
  id?: PostToIdResolver<TParent>;
  title?: PostToTitleResolver<TParent>;
  body?: PostToBodyResolver<TParent>;
  user?: PostToUserResolver<TParent>;
  comments?: PostToCommentsResolver<TParent>;
}

export interface PostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToCommentsArgs {
  options?: GQLPageQueryOptions;
}
export interface PostToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PostToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPostsPageTypeResolver<TParent = any> {
  data?: PostsPageToDataResolver<TParent>;
  links?: PostsPageToLinksResolver<TParent>;
  meta?: PostsPageToMetaResolver<TParent>;
}

export interface PostsPageToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostsPageToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostsPageToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQueryTypeResolver<TParent = any> {
  _?: QueryTo_Resolver<TParent>;
  albums?: QueryToAlbumsResolver<TParent>;
  album?: QueryToAlbumResolver<TParent>;
  comments?: QueryToCommentsResolver<TParent>;
  comment?: QueryToCommentResolver<TParent>;
  photos?: QueryToPhotosResolver<TParent>;
  photo?: QueryToPhotoResolver<TParent>;
  posts?: QueryToPostsResolver<TParent>;
  post?: QueryToPostResolver<TParent>;
  todos?: QueryToTodosResolver<TParent>;
  todo?: QueryToTodoResolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
}

export interface QueryTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAlbumsArgs {
  options?: GQLPageQueryOptions;
}
export interface QueryToAlbumsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAlbumsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAlbumArgs {
  id: string;
}
export interface QueryToAlbumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAlbumArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCommentsArgs {
  options?: GQLPageQueryOptions;
}
export interface QueryToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCommentArgs {
  id: string;
}
export interface QueryToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPhotosArgs {
  options?: GQLPageQueryOptions;
}
export interface QueryToPhotosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPhotosArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPhotoArgs {
  id: string;
}
export interface QueryToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPostsArgs {
  options?: GQLPageQueryOptions;
}
export interface QueryToPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPostsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPostArgs {
  id: string;
}
export interface QueryToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTodosArgs {
  options?: GQLPageQueryOptions;
}
export interface QueryToTodosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTodosArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTodoArgs {
  id: string;
}
export interface QueryToTodoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTodoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersArgs {
  options?: GQLPageQueryOptions;
}
export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  id: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTodoTypeResolver<TParent = any> {
  id?: TodoToIdResolver<TParent>;
  title?: TodoToTitleResolver<TParent>;
  completed?: TodoToCompletedResolver<TParent>;
  user?: TodoToUserResolver<TParent>;
}

export interface TodoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodoToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodoToCompletedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodoToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTodosPageTypeResolver<TParent = any> {
  data?: TodosPageToDataResolver<TParent>;
  links?: TodosPageToLinksResolver<TParent>;
  meta?: TodosPageToMetaResolver<TParent>;
}

export interface TodosPageToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodosPageToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodosPageToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  address?: UserToAddressResolver<TParent>;
  phone?: UserToPhoneResolver<TParent>;
  website?: UserToWebsiteResolver<TParent>;
  company?: UserToCompanyResolver<TParent>;
  posts?: UserToPostsResolver<TParent>;
  albums?: UserToAlbumsResolver<TParent>;
  todos?: UserToTodosResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWebsiteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPostsArgs {
  options?: GQLPageQueryOptions;
}
export interface UserToPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPostsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAlbumsArgs {
  options?: GQLPageQueryOptions;
}
export interface UserToAlbumsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToAlbumsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToTodosArgs {
  options?: GQLPageQueryOptions;
}
export interface UserToTodosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToTodosArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPageTypeResolver<TParent = any> {
  data?: UsersPageToDataResolver<TParent>;
  links?: UsersPageToLinksResolver<TParent>;
  meta?: UsersPageToMetaResolver<TParent>;
}

export interface UsersPageToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPageToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPageToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
